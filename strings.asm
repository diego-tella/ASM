;incompleted strings
section .data
    asciichars: db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E   
    errorArgs: db "Pass a file/binary as an argument",0x0,0xa
    sizeErrorArgs: equ $ - errorArgs
    fileFlags: dq 0102o         ; create file + read and write mode
    fileMode:  dq 00600o        ; user has read write permission
    buffer: times 32 db 0

section .text
global _start

_start:
    mov r8, [rsp]
    cmp r8, 2
    jne _errorArgs
    mov r8, [rsp+16]
    
    mov rax, 2
    mov rdi, [r8]
    push r8
    mov rsi, [fileFlags]
    mov rdx, [fileMode] 
    syscall
    mov ebx, [rax] ; file descriptor
    

    mov rax, 0
        

_write:
    mov rax, 1
    mov rdi, 1
    ; needs to pass string and count rsi, rdx
    syscall
    ret

_errorArgs:
    mov rsi, errorArgs
    mov rdx, sizeErrorArgs
    call _write
    jmp _exit


_exit:
    mov rax, 0x3c
    mov rdi, 1
    syscall
